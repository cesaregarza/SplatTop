name: Build and Update discord bot

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/discord-bot
    paths:
      - "src/discord_bot/**"

jobs:
  discord_bot:
    runs-on: ubuntu-latest
    environment: SplatTop
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_SPLATTOP_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install s3cmd
        run: sudo apt-get install s3cmd

      - name: Configure s3cmd to use DigitalOcean Spaces
        run: |
          echo "[default]
          access_key = ${{ secrets.DO_SPACES_KEY }}
          secret_key = ${{ secrets.DO_SPACES_SECRET }}
          host_base = ${{ secrets.DO_SPACES_ENDPOINT }}
          host_bucket = %(bucket)s.${{ secrets.DO_SPACES_ENDPOINT }}
          use_https = True" > ~/.s3cfg

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build and push Docker image
        run: |
          docker build \
            -t registry.digitalocean.com/sendouq/discord-bot:latest \
            -f dockerfiles/dockerfile.discord .
          docker push registry.digitalocean.com/sendouq/discord-bot:latest

      - name: Get self IP
        id: self_ip
        run: |
          SELF_IP=$(curl -s https://api.ipify.org)
          echo $SELF_IP
          echo "self_ip=$SELF_IP" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: terraform/discord
        run: terraform init

      - name: Get existing tfplan from S3 if exists
        id: get_tfplan
        working-directory: terraform/discord
        run: |
          # Check S3CMD configuration
          echo "S3CMD Configuration:"
          s3cmd --dump-config | grep -v -e secret_key -e access_key

          # Attempt to list bucket contents
          echo "Attempting to list bucket contents:"
          s3cmd ls s3://splat-top/discord/ || echo "Failed to list bucket contents"

          # Attempt to get the tfplan file
          echo "Attempting to get tfplan file:"
          if s3cmd get s3://splat-top/discord/tfplan tfplan; then
            echo "Successfully retrieved tfplan from S3"
            echo "tfplan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Failed to retrieve tfplan from S3"
            echo "tfplan_exists=false" >> $GITHUB_OUTPUT
          fi

          # Check if file exists locally
          if [ -f tfplan ]; then
            echo "tfplan file exists locally"
          else
            echo "tfplan file does not exist locally"
          fi

      - name: Terraform Plan
        working-directory: terraform/discord
        run: |
          if [ "${{ steps.get_tfplan.outputs.tfplan_exists }}" = "true" ]; then
            terraform show -json tfplan > tfplan.json
            terraform plan -out=tfplan -input=false
          else
            terraform plan -out=tfplan -input=false
          fi
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_source_ip: ${{ steps.self_ip.outputs.self_ip }}
          TF_VAR_joy_ip: ${{ secrets.JOY_IP }}
          TF_VAR_database_cluster_name: ${{ secrets.DIGITALOCEAN_DATABASE_CLUSTER }}

      - name: Terraform Apply
        id: terraform_apply
        working-directory: terraform/discord
        run: |
          terraform apply -auto-approve tfplan
          BOT_HOST_IP=$(terraform output -raw bot_host_ip)
          BOT_HOST_ID=$(terraform output -raw bot_host_id)
          echo "bot_host_ip=$BOT_HOST_IP" >> $GITHUB_OUTPUT
          echo "bot_host_id=$BOT_HOST_ID" >> $GITHUB_OUTPUT

      - name: Save tfplan to S3
        if: ${{ steps.terraform_apply.outcome == 'success' }}
        run: s3cmd put tfplan s3://splat-top/discord/tfplan

      - name: Wait for Droplet to come online
        run: |
          sleep 90

      - name: SSH to Droplet
        id: ssh
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.terraform_apply.outputs.bot_host_ip }}
          username: root
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY_ED }}
          script: |
            export PATH=$PATH:/usr/sbin
            export DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
            export DO_API_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            sudo apt-get update
            sudo apt-get install -y docker.io
            docker login -u $DO_API_TOKEN \
              -p $DO_API_TOKEN registry.digitalocean.com/sendouq
            docker pull registry.digitalocean.com/sendouq/discord-bot:latest
            docker run -d --name discord-bot \
              -e DISCORD_BOT_TOKEN=$DISCORD_BOT_TOKEN \
              --entrypoint poetry \
              registry.digitalocean.com/sendouq/discord-bot:latest \
              run start_discord_bot

      - name: Sleep if droplet is still not ready
        id: resleep
        if: ${{ steps.ssh.outcome == 'failure' }}
        run: |
          sleep 60

      - name: SSH to Droplet
        id: ressh
        if: ${{ steps.ssh.outcome == 'failure' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.terraform_apply.outputs.bot_host_ip }}
          username: root
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY_ED }}
          script: |
            export PATH=$PATH:/usr/sbin
            export DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
            export DO_API_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
            sudo apt-get update
            sudo apt-get install -y docker.io
            docker login -u $DO_API_TOKEN \
              -p $DO_API_TOKEN registry.digitalocean.com/sendouq
            docker pull registry.digitalocean.com/sendouq/discord-bot:latest
            docker run -d --name discord-bot \
              -e DISCORD_BOT_TOKEN=$DISCORD_BOT_TOKEN \
              --entrypoint poetry \
              registry.digitalocean.com/sendouq/discord-bot:latest \
              run start_discord_bot

      - name: kill droplet if fail
        if: ${{ failure() && steps.terraform_apply.outcome == 'success' }}
        run: |
          DROPLET_ID=${{ steps.terraform_apply.outputs.bot_host_id }}
          curl -X DELETE "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" \
          -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json"
