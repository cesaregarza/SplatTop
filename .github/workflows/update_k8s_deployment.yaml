name: Build and Update Kubernetes Deployment

on:
  workflow_dispatch:
    inputs:
      override-check:
        description: "Override check for changes"
        type: boolean
        required: false
        default: false
  push:
    branches:
      - main
    paths:
      - "src/**"
      - ".version"
      - "k8s/**"
      - "i18n/**"

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read
  checks: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    environment: SplatTop
    outputs:
      python_changed: ${{ steps.finalize.outputs.python_changed }}
      react_changed: ${{ steps.finalize.outputs.react_changed }}
      i18n_changed: ${{ steps.finalize.outputs.i18n_changed }}
      exit_pipeline: ${{ steps.finalize.outputs.exit_pipeline }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            python:
              - 'src/celery_app/**'
              - 'src/fast_api_app/**'
              - 'src/shared_lib/**'
            react:
              - 'src/react_app/**'
            i18n:
              - 'i18n/**'

      - name: Finalize change detection
        id: finalize
        env:
          PYTHON_CHANGED: ${{ steps.changes.outputs.python }}
          REACT_CHANGED: ${{ steps.changes.outputs.react }}
          I18N_CHANGED: ${{ steps.changes.outputs.i18n }}
          ACTOR: ${{ github.actor }}
        run: |
          python="${PYTHON_CHANGED:-false}"
          react="${REACT_CHANGED:-false}"
          i18n="${I18N_CHANGED:-false}"
          override="false"

          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            override=$(jq -r '.inputs["override-check"] // "false"' "$GITHUB_EVENT_PATH" 2>/dev/null || echo "false")
            if [ "$override" = "true" ]; then
              echo "Override requested; forcing build of backend and frontend images."
              python=true
              react=true
            fi
          fi

          if [ "$i18n" = "true" ] && [ "$ACTOR" != "github-actions[bot]" ] && [ "$override" != "true" ]; then
            exit_pipeline=true
          else
            exit_pipeline=false
          fi

          {
            echo "python_changed=${python}"
            echo "react_changed=${react}"
            echo "i18n_changed=${i18n}"
            echo "exit_pipeline=${exit_pipeline}"
          } >> "$GITHUB_OUTPUT"

  build:
    needs: check
    if: needs.check.outputs.exit_pipeline == 'false'
    runs-on: ubuntu-latest
    environment: SplatTop
    outputs:
      next_version: ${{ steps.nextver.outputs.version }}
      latest_release: ${{ steps.latest.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Read .version
        id: semver
        run: echo "version=$(cat .version)" >> "$GITHUB_OUTPUT"

      - name: Get latest release tag
        id: latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(gh release view --json tagName -q .tagName 2>/dev/null || echo "")
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Compute next version
        id: nextver
        uses: actions/github-script@v7
        env:
          BASE_VERSION: ${{ steps.semver.outputs.version }}
          LATEST_TAG: ${{ steps.latest.outputs.tag }}
        with:
          script: |
            function parse(v) {
              const [M='0', m='0', p='0'] = String(v || '').replace(/^v/, '').split('.');
              return { M: +M || 0, m: +m || 0, p: +p || 0 };
            }
            const base = parse(process.env.BASE_VERSION);
            const latest = parse(process.env.LATEST_TAG);
            const baseGreater =
              base.M > latest.M ||
              (base.M === latest.M && (
                base.m > latest.m ||
                (base.m === latest.m && base.p > latest.p)
              ));
            const next = baseGreater
              ? `${base.M}.${base.m}.${base.p}`
              : `${latest.M}.${latest.m}.${latest.p + 1}`;
            core.setOutput('version', next);

      - name: Build & push FastAPI image
        if: needs.check.outputs.python_changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/dockerfile.fast-api
          push: true
          tags: |
            registry.digitalocean.com/sendouq/fast-api:latest
            registry.digitalocean.com/sendouq/fast-api:v${{ steps.nextver.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push Celery image
        if: needs.check.outputs.python_changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/dockerfile.celery
          push: true
          tags: |
            registry.digitalocean.com/sendouq/celery:latest
            registry.digitalocean.com/sendouq/celery:v${{ steps.nextver.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push React image
        if: needs.check.outputs.react_changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/dockerfile.react
          build-args: |
            REACT_APP_VERSION=${{ steps.nextver.outputs.version }}
          push: true
          tags: |
            registry.digitalocean.com/sendouq/react:latest
            registry.digitalocean.com/sendouq/react:v${{ steps.nextver.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-deployment:
    needs: [check, build]
    if: github.ref == 'refs/heads/main' && needs.check.outputs.exit_pipeline == 'false' && needs.build.result == 'success'
    runs-on: ubuntu-latest
    environment: SplatTop
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}

      - name: Ensure registry pull secret
        run: |
          kubectl delete secret regcred --ignore-not-found
          kubectl create secret docker-registry regcred \
            --docker-server=registry.digitalocean.com \
            --docker-username='${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}' \
            --docker-password='${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}' \
            --docker-email='${{ secrets.EMAIL }}'

      - name: Apply application secrets
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DO_SPACES_KEY: ${{ secrets.DO_SPACES_KEY }}
          DO_SPACES_SECRET: ${{ secrets.DO_SPACES_SECRET }}
          DO_SPACES_REGION: ${{ secrets.DO_SPACES_REGION }}
          DO_SPACES_ENDPOINT: ${{ secrets.DO_SPACES_ENDPOINT }}
          DO_SPACES_ML_ENDPOINT: ${{ secrets.DO_SPACES_ML_ENDPOINT }}
          DO_SPACES_ML_DIR: ${{ vars.DO_SPACES_ML_DIR }}
          API_TOKEN_PEPPER: ${{ secrets.API_TOKEN_PEPPER }}
          ADMIN_API_TOKENS_HASHED: ${{ secrets.ADMIN_API_TOKENS_HASHED }}
        run: |
          HASHED="${ADMIN_API_TOKENS_HASHED}"
          if [ -z "$HASHED" ]; then
            HASHED=$(python scripts/generate_api_admin_secrets.py \
              --tokens "${{ secrets.ADMIN_API_TOKENS }}" \
              --pepper "${API_TOKEN_PEPPER}" \
              --format json | jq -r '.ADMIN_API_TOKENS_HASHED')
          fi
          kubectl create secret generic db-secrets \
            --from-literal=DB_HOST="${DB_HOST}" \
            --from-literal=DB_USER="${DB_USER}" \
            --from-literal=DB_PASSWORD="${DB_PASSWORD}" \
            --from-literal=DB_NAME="${DB_NAME}" \
            --from-literal=DB_PORT="${DB_PORT}" \
            --from-literal=DO_SPACES_KEY="${DO_SPACES_KEY}" \
            --from-literal=DO_SPACES_SECRET="${DO_SPACES_SECRET}" \
            --from-literal=DO_SPACES_REGION="${DO_SPACES_REGION}" \
            --from-literal=DO_SPACES_ENDPOINT="${DO_SPACES_ENDPOINT}" \
            --from-literal=DO_SPACES_ML_ENDPOINT="${DO_SPACES_ML_ENDPOINT}" \
            --from-literal=DO_SPACES_ML_DIR="${DO_SPACES_ML_DIR}" \
            --from-literal=API_TOKEN_PEPPER="${API_TOKEN_PEPPER}" \
            --from-literal=ADMIN_TOKEN_PEPPER="${API_TOKEN_PEPPER}" \
            --from-literal=ADMIN_API_TOKENS_HASHED="${HASHED}" \
            --from-literal=RANKINGS_DB_SCHEMA="rankings" \
            --from-literal=RANKINGS_DB_NAME="${DB_NAME}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply base Kubernetes manifests
        run: |
          kubectl apply -f k8s/redis/redis-deployment.yaml
          kubectl apply -f k8s/redis/redis-service.yaml
          kubectl apply -f k8s/celery-worker/celery-worker-deployment.yaml
          kubectl apply -f k8s/celery-beat/celery-beat-deployment.yaml
          kubectl apply -f k8s/fast-api/fast-api-deployment.yaml
          kubectl apply -f k8s/fast-api/fast-api-service.yaml
          kubectl apply -f k8s/react/react-deployment.yaml
          kubectl apply -f k8s/react/react-service.yaml
          kubectl apply -f k8s/splatgpt/splatgpt-deployment.yaml
          kubectl apply -f k8s/splatgpt/splatgpt-service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Update deployment images
        env:
          VERSION: ${{ needs.build.outputs.next_version }}
          PYTHON_CHANGED: ${{ needs.check.outputs.python_changed }}
          REACT_CHANGED: ${{ needs.check.outputs.react_changed }}
        run: |
          TAG="v${VERSION}"
          if [ -z "${VERSION}" ]; then
            echo "Missing version output from build job" >&2
            exit 1
          fi

          if [ "${PYTHON_CHANGED}" = "true" ]; then
            kubectl set image deployment/celery-worker celery-worker=registry.digitalocean.com/sendouq/celery:${TAG}
            kubectl set image deployment/celery-beat celery-beat=registry.digitalocean.com/sendouq/celery:${TAG}
            kubectl set image deployment/fast-api-app fast-api-app=registry.digitalocean.com/sendouq/fast-api:${TAG}
          fi

          if [ "${REACT_CHANGED}" = "true" ]; then
            kubectl set image deployment/react-app react-app=registry.digitalocean.com/sendouq/react:${TAG}
          fi

  release:
    needs: [check, build, update-deployment]
    if: github.ref == 'refs/heads/main' && needs.check.outputs.exit_pipeline == 'false' && needs.build.result == 'success' && needs.update-deployment.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub release if missing
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.build.outputs.next_version }}
          LATEST: ${{ needs.build.outputs.latest_release }}
        run: |
          if [ -z "${TAG}" ]; then
            echo "No tag computed; skipping release."
            exit 0
          fi

          if [ "${TAG}" != "${LATEST}" ]; then
            gh release create "${TAG}" \
              --title "${GITHUB_REPOSITORY#*/} ${TAG}" \
              --generate-notes
          else
            echo "Release ${TAG} already exists; skipping."
          fi
