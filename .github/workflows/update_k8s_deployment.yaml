name: Build and Update Kubernetes Deployment

on:
  workflow_dispatch:
    inputs:
      override-check:
        description: "Override check for changes"
        type: boolean
        required: false
        default: false
  push:
    branches:
      - main

jobs:
  check:
    runs-on: ubuntu-latest
    environment: SplatTop
    outputs:
      skip: ${{ steps.check_changes.outputs.skip }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CI_SPLATTOP_TOKEN }}
          fetch-depth: 0

      - name: Check for changes
        id: check_changes
        run: |
          echo "Checking for changes in src/"
          CHANGES=$(git diff --name-only HEAD~1 HEAD -- 'src/')
          if [ -n "$CHANGES" ]; then
            echo "Changes found, running"
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "No changes found, skipping"
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check
    if: (needs.check.outputs.skip == 'false') || (github.event.inputs.override-check == 'true')
    runs-on: ubuntu-latest
    environment: SplatTop
    outputs:
        updated: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.CI_SPLATTOP_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build and push Celery Dockerfile
        run: |
          docker build -t registry.digitalocean.com/sendouq/celery:latest -f dockerfiles/dockerfile.celery .
          docker push registry.digitalocean.com/sendouq/celery:latest

      - name: Build and push FastAPI Dockerfile
        run: |
          docker build -t registry.digitalocean.com/sendouq/fast-api:latest -f dockerfiles/dockerfile.fast-api .
          docker push registry.digitalocean.com/sendouq/fast-api:latest

      - name: Build and push React Dockerfile
        run: |
          docker build -t registry.digitalocean.com/sendouq/react:latest -f dockerfiles/dockerfile.react .
          docker push registry.digitalocean.com/sendouq/react:latest

  update-deployment:
    needs: build
    runs-on: ubuntu-latest
    environment: SplatTop

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.CI_SPLATTOP_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}

      - name: Create Kubernetes secrets
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DO_SPACES_KEY: ${{ secrets.DO_SPACES_KEY }}
          DO_SPACES_SECRET: ${{ secrets.DO_SPACES_SECRET }}
          DO_SPACES_REGION: ${{ secrets.DO_SPACES_REGION }}
          DO_SPACES_ENDPOINT: ${{ secrets.DO_SPACES_ENDPOINT }}
        run: |
          mv k8s/secrets.template k8s/secrets.yaml
          sed -i "s|%DB_HOST%|${DB_HOST}|g" k8s/secrets.yaml
          sed -i "s|%DB_USER%|${DB_USER}|g" k8s/secrets.yaml
          sed -i "s|%DB_PASSWORD%|${DB_PASSWORD}|g" k8s/secrets.yaml
          sed -i "s|%DB_NAME%|${DB_NAME}|g" k8s/secrets.yaml
          sed -i "s|%DB_PORT%|${DB_PORT}|g" k8s/secrets.yaml
          sed -i "s|%DO_SPACES_KEY%|${DO_SPACES_KEY}|g" k8s/secrets.yaml
          sed -i "s|%DO_SPACES_SECRET%|${DO_SPACES_SECRET}|g" k8s/secrets.yaml
          sed -i "s|%DO_SPACES_REGION%|${DO_SPACES_REGION}|g" k8s/secrets.yaml
          sed -i "s|%DO_SPACES_ENDPOINT%|${DO_SPACES_ENDPOINT}|g" k8s/secrets.yaml
          kubectl apply -f k8s/secrets.yaml

      - name: Create docker registry secret
        run: |
          kubectl delete secret regcred --ignore-not-found
          kubectl create secret docker-registry regcred \
            --docker-server=https://registry.digitalocean.com/sendouq \
            --docker-username=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            --docker-password=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            --docker-email=${{ secrets.EMAIL }}

      - name: Install Cert-Manager
        run: |
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml

      - name: Wait for Cert-Manager to be ready
        run: |
          kubectl wait --namespace cert-manager --for=condition=available --timeout=600s deployment/cert-manager
          kubectl wait --namespace cert-manager --for=condition=available --timeout=600s deployment/cert-manager-cainjector
          kubectl wait --namespace cert-manager --for=condition=available --timeout=600s deployment/cert-manager-webhook

      - name: Update ClusterIssuer
        env:
          EMAIL: ${{ secrets.EMAIL }}
        run: |
          mv k8s/cluster-issuer.template k8s/cluster-issuer.yaml
          sed -i "s/%EMAIL%/${EMAIL}/g" k8s/cluster-issuer.yaml
          kubectl apply -f k8s/cluster-issuer.yaml
          kubectl apply -f k8s/certificate.yaml

      - name: Apply Kubernetes configuration files
        run: |
          kubectl apply -f k8s/redis/redis-deployment.yaml
          kubectl apply -f k8s/redis/redis-service.yaml
          kubectl apply -f k8s/celery-worker/celery-worker-deployment.yaml
          kubectl apply -f k8s/celery-beat/celery-beat-deployment.yaml
          kubectl apply -f k8s/fast-api/fast-api-deployment.yaml
          kubectl apply -f k8s/fast-api/fast-api-service.yaml
          kubectl apply -f k8s/react/react-deployment.yaml
          kubectl apply -f k8s/react/react-service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Repull images if build was updated
        if: ${{ needs.build.outputs.updated == 'true' }}
        run: |
          kubectl rollout restart deployment/redis-deployment
          kubectl rollout restart deployment/celery-worker-deployment
          kubectl rollout restart deployment/celery-beat-deployment
          kubectl rollout restart deployment/fast-api-deployment
          kubectl rollout restart deployment/react-deployment
